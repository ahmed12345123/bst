#include <iostream>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;

    Node(int value) : key(value), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    Node* root;

    Node* deleteNode(Node* node, int key, bool isRoot) {
        if (node == nullptr)
            return nullptr;

        if (isRoot && node->key == key) {
            cout << "Cannot delete the root node.\n";
            return node;
        }

        if (key < node->key) {
            node->left = deleteNode(node->left, key, false);
        } else if (key > node->key) {
            node->right = deleteNode(node->right, key, false);
        } else {
            
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }

            Node* temp = minValueNode(node->right);
            node->key = temp->key;
            node->right = deleteNode(node->right, temp->key, false);
        }
        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr)
            current = current->left;
        return current;
    }

    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            cout << node->key << " ";
            inorderTraversal(node->right);
        }
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int key) {
        root = insert(root, key);
    }

    Node* insert(Node* node, int key) {
        if (node == nullptr)
            return new Node(key);

        if (key < node->key)
            node->left = insert(node->left, key);
        else if (key > node->key)
            node->right = insert(node->right, key);

        return node;
    }

    void deleteNode(int key) {
        root = deleteNode(root, key, root != nullptr && root->key == key);
    }

    void inorder() {
        inorderTraversal(root);
        cout << endl;
    }
};

int main() {
    BinarySearchTree bst;

    // Insert nodes
    bst.insert(50);
    bst.insert(30);
    bst.insert(20);
    bst.insert(40);
    bst.insert(70);
    bst.insert(60);
    bst.insert(80);

    cout << "Inorder traversal before deletion: ";
    bst.inorder();

    // Attempt to delete a non-root node
    cout << "Deleting node 20...\n";
    bst.deleteNode(20);
    cout << "Inorder traversal after deleting node 20: ";
    bst.inorder();

    // Attempt to delete the root node
    cout << "Attempting to delete the root node (50)...\n";
    bst.deleteNode(50);
    cout << "Inorder traversal after attempting to delete root: ";
    bst.inorder();

    return 0;
}
